* Co trzeba opowiedzieć?
** Parę spraw organizacyjnych
*** Czym będziemy się zajmować
**** Chcemy nauczyć się programować i dowodzić przy użyciu typów zależnych w języku Agda
**** Chcemy zrozumieć klasyczny system teoretyczny, który za tym stoi

*** Jakie są wymagania wstepne
**** Znajomość jakiegoś typowanego języka funkcyjnego
**** Podstawowa znajomość zagadnień żwiaznych z typami i rachunkiem lambda
     
*** Ogólny plan seminarium
**** Dzisiaj (Tydzień 1.) (Organizacyjne + wstęp)
***** Omówienie spraw organizacyjnych
***** Krótka prezentacja praktycznych możliwości typów zależnych 
***** Przypomnienie idei Izomorfizmu Curry'ego-Howarda

**** Tygodnie 2-3 (Teoria Martina-Lofa)
***** Paweł i Wojtek omówią polimorficzną teorię typów Martina-Lofa
      Pozwoli nam to zrozumieć zasadę działania typów zależnych

**** Tydzień 4. (ew. tygodnie 4-5) (zapoznanie z Agdą)
***** (Raczej Paweł i Wojtek) Wprowadzenie do Agdy
***** Porównanie klasycznej teorii i tego co mamy w Agdzie

**** Pozostałe prezentacje (Tygodnie 5-15)
***** Prezentacje tematów do wyboru
****** Mamy listę proponowanych tematów, ale sprawa jest otwarta
****** Pierwsza prezentacja studencka powinna omawiać prace:
       Why Dependent Types Matter - McBride, McKinna, Swierstra
       Power of Pi - Swierstra

*** Gdzie można znaleźć listę tematów i literaturę
**** Będzie odnośnik na stronie seminarium (moodle)
**** Można by tę listę wydrukować i rozdać studentom
     
*** Czego oczekujemy
**** Bardzo dobrej frekwencji -- dozwolone 3 nieobecności

**** Przygotowania porządnej prezentacji

**** Przygotowania przykładowego kodu w Agdzie do tej prezentacji
     Kod ma pokazywać dane zagadnienie w praktyce lub implementować algorytm z pracy.
     (Np. jeśli praca dotyczy ciekawego schematu rekursji, to chcemy zobaczyć i potem sami potestować
     programy, w którym to się nam faktycznie przydaje).
***** W razie potrzeby służymy pomocą

**** Do części teoretycznej będą przygotowane ćwiczenia. 
     Będzie można je rozwiązać na papierze, a część sprawdzić w Agdzie. 
     Będą one nieobowiązkowe, ale jeśli ktoś podeśle nam swoje
     rozwiązania (e-mail? moodle?) przed podanym deadlinem to je sprawdzimy i skomentujemy

** Bardzo krótko: czym w ogóle są typy zależne
*** Zalety języków funkcyjnych
**** pozbywamy się pewnych klas błędów programistycznych za darmo (dereferencja pustego wskaźnika, zwolnienie niedostępnej pamięci,...)
**** mamy _możliwość_ niedopuszczenia do powstania niektórych błędów logicznych
     Przykłady: listy o parzystej długości, nie pozwalanie na utworzenie błędnych wartości

*** Możemy zrobić dużo, ale czasami chcemy więcej...
**** typ bool jest do niczego - przykład McBride'a z tailem
     if null xs then tail xs else xs -- gdzie tu jest błąd typowy?

**** projektowanie API
     Pewne niezmienniki musimy opisywać słownie w komentarzach i liczyć, że będą one zachowane.
     Podobnie z warunkami wstępnymi, możemy napisać:
       -- wymaga niepustej listy
       tail :: [a] -> [a]
     ale nie mamy żadnych gwarancji, że ktoś nam tego dopilnuje.
     

*** Typy zależne na ratunek!
**** dowod jest obywatelem pierwszej kategorii

**** predykaty: liczba parzysta, liczba pierwsza, posortowana lista, plik jest otwarty

**** teraz możemy zrobić bardzo ładne i czytelne API
     
** Prezentacja przykładowych programów
*** Drzewa BST?
*** Algorytm unifikacji?


* Materiały, które chyba odpadną z pierwszego wykładu (weszłyby do tutorialy Agdy)
** Po co nam zajmować się w ogóle teorią?!
*** Żeby jakakolwiek certyfikacja miała sens, musimy mieć pewność, że system nie jest np. sprzeczny
    Dałoby się wtedy udowodnić, że np. funkcja identycznościowa na listach jest poprawnym sortowaniem!

** Krótką historię proverów
*** Można wymienić parę nazwisk, programów i teorii
**** LEGO (Luo, Pollack 1992)
**** Coc, Coq (Huet, Coquand, ...) [Calculus of constructions 1985]
     It was inspired by the works of Martin-Loef, Girard and de Bruijin
**** Automath
**** NuPRL (Constable 1986)
**** LF (Harper 1993), Elf, Twelf
**** Cayenne
**** Dependent ML
**** Epigram
**** Epigram 2

** Historia Agdy (na podstawie wikipedii i japońskiego papera)
*** ALF (Magnusson & Nordstroem 1994)
*** Agda 1 (+ edytor Alfa)
*** Agda 2
    Agda była tworzona od 1990 na Uniwersytecie w Chalmers między innymi przez Catarinę Coquand,
    Makoto Takeyamę i Marcina Benke.
    W 2006 zaczęto przepisywanie systemu od nowa. Zajęli się tym Ulf Norell (główny implementator), Nils Anders Danielsson,
    Makoto Takeyama i Marcin Benke. Przy tej okazji system bardzo się zmienił. Agda1 odnosi się do wszystkich wersji
    przed tym przedwsięzięciem, Agda2 oznacza aktualną wersję.
